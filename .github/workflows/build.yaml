name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - 'latest/gateway-service/**'
      - 'latest/auth-service/**'
      - 'latest/customer-service/**'
      - 'latest/vehicle-service/**'
      - 'latest/booking-service/**'
      - 'latest/support-service/**'
      - 'latest/rsa-service/**'
      - 'latest/feedback-service/**'
  pull_request:
    branches:
      - main
    paths:
      - 'latest/gateway-service/**'
      - 'latest/auth-service/**'
      - 'latest/customer-service/**'
      - 'latest/vehicle-service/**'
      - 'latest/booking-service/**'
      - 'latest/support-service/**'
      - 'latest/rsa-service/**'
      - 'latest/feedback-service/**'
  workflow_dispatch:

jobs:
  gateway-service-build:
    if: "contains(github.event.head_commit.message, 'gateway-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for gateway-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for gateway-service
        working-directory: latest/gateway-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/gateway-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/gateway-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/gateway-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  auth-service-build:
    if: "contains(github.event.head_commit.message, 'auth-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for auth-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for auth-service
        working-directory: latest/auth-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/auth-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/auth-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/auth-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  customer-service-build:
    if: "contains(github.event.head_commit.message, 'customer-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for customer-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for customer-service
        working-directory: latest/customer-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/customer-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/customer-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/customer-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  vehicle-service-build:
    if: "contains(github.event.head_commit.message, 'vehicle-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for vehicle-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for vehicle-service
        working-directory: latest/vehicle-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/vehicle-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/vehicle-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/vehicle-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  booking-service-build:
    if: "contains(github.event.head_commit.message, 'booking-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for booking-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for booking-service
        working-directory: latest/booking-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/booking-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/booking-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/booking-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  support-service-build:
    if: "contains(github.event.head_commit.message, 'support-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for support-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for support-service
        working-directory: latest/support-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/support-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/support-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/support-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  rsa-service-build:
    if: "contains(github.event.head_commit.message, 'rsa-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for rsa-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for rsa-service
        working-directory: latest/rsa-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/rsa-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/rsa-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/rsa-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

  feedback-service-build:
    if: "contains(github.event.head_commit.message, 'feedback-service')"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python for feedback-service
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies for feedback-service
        working-directory: latest/feedback-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        working-directory: latest/feedback-service
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/autochoice/feedback-svc:latest

      - name: Tag Docker image
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/autochoice/feedback-svc:latest ${{ secrets.DOCKER_USERNAME }}/autochoice:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/autochoice:latest
